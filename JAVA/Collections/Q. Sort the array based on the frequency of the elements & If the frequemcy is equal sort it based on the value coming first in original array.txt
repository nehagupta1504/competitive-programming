/*
Q. Sort the array based on the frequency of the elements & If the frequemcy is equal sort it based on the value coming first in original array
Test Case 1-
[4,1,1,1,5,5,5,5,4,4]
5- 4 times
1 & 4 - 3 times
so
op--
5,5,5,5, 4,4,4,1,1,1
Explanantion - Since the 4 &1 have equal frequency & 4 is coming first in original array then op will conatin 4 first & then 1

Test Case 2- 
4,1,1,1,3,3,2,2,5,5,5,5,4,4

op-
5 5 5 5 4 4 4 1 1 1 3 3 2 2 

*/

//--------------------------------------------------------------------------------------------------- CODE
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static HashMap<Integer, Integer> sortByValue(HashMap<Integer, Integer> map, HashMap<Integer, Integer> position){
		//Create a list from elements of HashMap
		List<Map.Entry<Integer, Integer>> list = new LinkedList<Map.Entry<Integer, Integer>>(map.entrySet());
		//sort the list
		Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>(){
			public int compare(Map.Entry<Integer, Integer> m1, Map.Entry<Integer, Integer> m2){
				//If values are equal sort it position wise & return 
				if(m1.getValue() == m2.getValue()){
					return (position.get(m1.getKey())).compareTo(position.get(m2.getKey()));
				}
				//If not equal then sort it value wise
				return (m2.getValue()).compareTo(m1.getValue());

			}
		});
		//Putting value back to hashmap
		HashMap<Integer, Integer> temp = new LinkedHashMap<Integer, Integer>();
		for(Map.Entry<Integer, Integer> el: list){
			temp.put(el.getKey(), el.getValue());
		}
		return temp;
	}

	public static void main (String[] args) {
                      // Your code here
					 int[] arr = new int[]{4,1,1,1,3,3,2,2,5,5,5,5,4,4};
					 HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
					 HashMap<Integer, Integer> position = new HashMap<Integer, Integer>();

					 for(int i = 0 ; i < arr.length; i++){
						 if(map.containsKey(arr[i])){
							 map.put(arr[i], map.get(arr[i])+1);
						 }else{
							 map.put(arr[i], 1);
							 position.put(arr[i], i);
						 }
						//  System.out.println(arr[i]+" "+map.get(arr[i]));
					 }
				HashMap<Integer, Integer> map2 = sortByValue(map, position);
			
				 System.out.println("After Sorting");
				 for(Map.Entry el: map2.entrySet()){
					 int timesAppearing = (int)el.getValue();
					 while(timesAppearing-->0){
						 System.out.print(el.getKey()+" ");
						
					 }
				 }

	}
}

//------------------------------------------------------------------------------------------------ CODE OVER

/* -------------------------------------------------------------------------------------------- OUTPUT

After Sorting
5 5 5 5 4 4 4 1 1 1 3 3 2 2 

*/