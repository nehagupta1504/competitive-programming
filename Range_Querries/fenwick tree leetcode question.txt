Question Link - https://leetcode.com/problems/range-sum-query-mutable/submissions/

Question 
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).


Constraints
Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8


Solution

class NumArray {
    
    int[] fenwickTree ;
    int[] nums ;
    public NumArray(int[] nums) {  
        this.nums = new int[nums.length];
        for(int i = 0 ; i < nums.length ; i++){
            this.nums[i] = nums[i];
        }
        this.fenwickTree = new int[nums.length +1];
        for(int i = 0 ; i < nums.length; i++){
            updateFenwickTree( i, nums[i]);
        }
        // for(int i = 0; i <= nums.length ; i++){
        //     System.out.print(fenwickTree[i]+" ");
        // }
        //         System.out.println();

    }
    
    public void updateFenwickTree( int index, int value){
        index = index + 1;
        while(index<=nums.length){
           fenwickTree[index] += value;
            index = index + (index & (-index));
        }
          
    }
    
    public void update(int index, int val) {
        int valueToBeUpdated = val - nums[index];
        nums[index] = val;
        // System.out.println("vtoup "+ valueToBeUpdated);
        updateFenwickTree(index, valueToBeUpdated);
        // for(int i = 0; i <= nums.length ; i++){
        //     System.out.print( fenwickTree[i]+" ");
        // }
        // System.out.println();
    }
    
    public int sumRange(int left, int right) {
       int leftSum = findSum(left);
       int rightSum = findSum(right+1);
        return rightSum-leftSum;
        // return 0;
    }
    public int findSum(int index){
        int sum=0;
        while(index>0){
            sum+=fenwickTree[index];
            index-=index&(-index);
        }
        return sum;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */